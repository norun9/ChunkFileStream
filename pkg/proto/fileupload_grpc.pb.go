// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: fileupload.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileUploadService_SingleUpload_FullMethodName   = "/fileupload.FileUploadService/SingleUpload"
	FileUploadService_MultipleUpload_FullMethodName = "/fileupload.FileUploadService/MultipleUpload"
)

// FileUploadServiceClient is the client API for FileUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileUploadServiceClient interface {
	// Unary RPC
	SingleUpload(ctx context.Context, in *SingleUploadRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error)
	// Bidirectional Stream RPC
	MultipleUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MultipleUploadRequest, MultipleUploadResponse], error)
}

type fileUploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileUploadServiceClient(cc grpc.ClientConnInterface) FileUploadServiceClient {
	return &fileUploadServiceClient{cc}
}

func (c *fileUploadServiceClient) SingleUpload(ctx context.Context, in *SingleUploadRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleUploadResponse)
	err := c.cc.Invoke(ctx, FileUploadService_SingleUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileUploadServiceClient) MultipleUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MultipleUploadRequest, MultipleUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileUploadService_ServiceDesc.Streams[0], FileUploadService_MultipleUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MultipleUploadRequest, MultipleUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileUploadService_MultipleUploadClient = grpc.BidiStreamingClient[MultipleUploadRequest, MultipleUploadResponse]

// FileUploadServiceServer is the server API for FileUploadService service.
// All implementations must embed UnimplementedFileUploadServiceServer
// for forward compatibility.
type FileUploadServiceServer interface {
	// Unary RPC
	SingleUpload(context.Context, *SingleUploadRequest) (*SingleUploadResponse, error)
	// Bidirectional Stream RPC
	MultipleUpload(grpc.BidiStreamingServer[MultipleUploadRequest, MultipleUploadResponse]) error
	mustEmbedUnimplementedFileUploadServiceServer()
}

// UnimplementedFileUploadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileUploadServiceServer struct{}

func (UnimplementedFileUploadServiceServer) SingleUpload(context.Context, *SingleUploadRequest) (*SingleUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleUpload not implemented")
}
func (UnimplementedFileUploadServiceServer) MultipleUpload(grpc.BidiStreamingServer[MultipleUploadRequest, MultipleUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MultipleUpload not implemented")
}
func (UnimplementedFileUploadServiceServer) mustEmbedUnimplementedFileUploadServiceServer() {}
func (UnimplementedFileUploadServiceServer) testEmbeddedByValue()                           {}

// UnsafeFileUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileUploadServiceServer will
// result in compilation errors.
type UnsafeFileUploadServiceServer interface {
	mustEmbedUnimplementedFileUploadServiceServer()
}

func RegisterFileUploadServiceServer(s grpc.ServiceRegistrar, srv FileUploadServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileUploadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileUploadService_ServiceDesc, srv)
}

func _FileUploadService_SingleUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUploadServiceServer).SingleUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileUploadService_SingleUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUploadServiceServer).SingleUpload(ctx, req.(*SingleUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileUploadService_MultipleUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileUploadServiceServer).MultipleUpload(&grpc.GenericServerStream[MultipleUploadRequest, MultipleUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileUploadService_MultipleUploadServer = grpc.BidiStreamingServer[MultipleUploadRequest, MultipleUploadResponse]

// FileUploadService_ServiceDesc is the grpc.ServiceDesc for FileUploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileUploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileupload.FileUploadService",
	HandlerType: (*FileUploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SingleUpload",
			Handler:    _FileUploadService_SingleUpload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MultipleUpload",
			Handler:       _FileUploadService_MultipleUpload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fileupload.proto",
}
